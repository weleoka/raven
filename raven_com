#!/usr/bin/env python3
# Copyright (c) 2017 Kai Weeks.
# See LICENSE for details.
"""
Main app to connect an email snd/rcv functionality and fish instructions out of messages.

These messages act as commands for Raven.

Raven presents an Email API to interface with web API services. 

Please report any issues to weleoka at github.
"""

import sys, os
import logging as logger
import pprint

# Development. Production should have the dependancies installed.
sys.path.insert(0, '/home/sikkaflex/wrkspc/raven/vendor')
#sys.path.insert(0, os.path.join(sys.path[0], 'vendor'))
print(sys.path)

import ravencore.main.config as raven_conf
from ravencore.utils.exceptions import *
import ravencore.utils.logging


from ravencore.main.queue import Queue
from ravencore.main.job import Job

from ravencore.coms.gmail import Gmail_in
from ravencore.coms.gmail import Gmail_out

from ravencore.user.user import User
from ravencore.user.request import Request

ravencore.utils.logging.initialiseLogging()

from pytz import utc

from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from apscheduler.executors.pool import ProcessPoolExecutor


def main():
    """
    Raven's main function

    The function from which all else takes place.

    parameters:
        void

    returns:
        boolean:
    """
    name = 'RAVENMAIN'
    my_logger = ravencore.utils.ravencore.utils.logging.getLogger(name) # Make a logger for this class.
    my_logger.info("Raven v%s" % (raven_conf.basic['version']))
    
    #test_user_query()
    #test_send_mail_saildocs(query)
    # position = test_dolink()
    #test_autogrib()
    import time
    time.sleep(10)
    #test_HTTP_headers()
    #test_recieve_mail()
    #test_send_mail()


def test_autogrib():
    queue = Queue()
    current_user = User('user2')
    service_request = Request(current_user, 'service1')
    job = Job(service_request)

    queue.add_to_request_queue(job)

    mail_out = Gmail_out()#.connect()
    mail_out.new_mail(job.job['mail'])
    mail_out.close()


def test_send_mail(my_mail):
    mail_out = Gmail_out()#.connect()
    mail_out.test_mail()
    mail_out.close()


def test_recieve_mail():
    prefetch = False
    mail_in = Gmail_in().connect()
    all_messages = mail_in.all(prefetch=prefetch)

    if prefetch:
        for mail in all_messages:
            print(mail.header.decode(encoding='UTF-8',errors='strict'))
            print(mail.body.decode(encoding='UTF-8',errors='strict'))
     
            for attachment in mail.attachments:
                print('Saving attachment: %s' % (attachment.name))
                print('Size: %s KB' % (attachment.size))
                attachment.save('attachments/%s' % (attachment.name))

    else:
    
        for mail in all_messages:
            print("MAIL: %s" % (mail))

    return all_messages


def test_identify_mail():
    pass


if __name__ == "__main__":

    try:
        main()
        

    except KeyboardInterrupt:
        logger.info("Raven halted by keyboard interrupt.")
        sys.exit(0)